## Example environment variables (!!!!  DO NOT put and commit real secrets here!!!!! )

# OpenAI API key used by scripts like scripts/generate_post.mjs
# Obtain from https://platform.openai.com/ and set in your shell / CI secrets

 
 # What .env.example is

 #  - A template file showing which environment variables your project needs.
 #  - It’s committed to git so others know what to set up.
 #  - It contains variable names only (no real values).

 #   What you should do

 #  - Do not put your real API key in .env.example.
 #  - Make a local copy and fill it in:
 #     - cp .env.example .env
 #    - Open .env and set OPENAI_API_KEY=your_real_key
 #      - Keep .env out of git (it’s already ignored).

#   How the key gets used here

 #  - Your VS Code task now reads OPENAI_API_KEY from your OS environment (${env:OPENAI_API_KEY}).
 #  - You have two easy options:
 #      - Option A (simplest): set the env var in your shell, and run the task.
 #      - macOS/Linux: `export OPENAI_API_KEY=your_real_key`
 #      - Windows PowerShell: `$Env:OPENAI_API_KEY='your_real_key'`
 #  - Option B (use .env automatically): we can tweak the task or script to load .env with dotenv. Examples:
 #      - Task command: `"command": "node -r dotenv/config scripts/generate_post.mjs"`
 #      - Or at the top of `scripts/generate_post.mjs`: `import 'dotenv/config'`

 #   Pick A if you’re comfortable setting env vars; pick B if you prefer keeping keys in .env files locally.

 #  CI/GitHub Actions

 #  - Put secrets in GitHub Repository Settings → Secrets and variables → Actions.
 #  - Reference them in workflows via ${{ secrets.MY_SECRET }} (never commit secrets).


OPENAI_API_KEY=