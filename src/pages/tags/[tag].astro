---
import { type CollectionEntry, getCollection } from 'astro:content';
import BaseHead from '../../components/BaseHead.astro';
import Footer from '../../components/Footer.astro';
import Header from '../../components/Header.astro';
import { tagToSlug } from '../../lib/slug';
import FormattedDate from '../../components/FormattedDate.astro';
import PostsGrid from '../../components/PostsGrid.astro';

export async function getStaticPaths() {
  const posts = await getCollection('blog');
  const prod = import.meta.env.PROD;
  const visible = prod ? posts.filter((p) => p.data.status === 'published') : posts;
  const tags = new Set<string>();
  for (const p of visible) for (const t of (p.data.tags ?? [])) tags.add(t);
  return [...tags].map((t) => ({ params: { tag: tagToSlug(t) }, props: { tag: t } }));
}

const { tag } = Astro.props as { tag: string };
const posts = (await getCollection('blog'))
  .filter((p) => (import.meta.env.PROD ? p.data.status === 'published' : true))
  .filter((p) => (p.data.tags ?? []).includes(tag))
  .sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

// Thumbnails with lazy import and fallback to default.svg
const thumbs = import.meta.glob('../../assets/thumbs/*.svg', { query: '?url', import: 'default' });
async function getThumb(id: string) {
  const key = `../../assets/thumbs/${id}.svg`;
  const def = `../../assets/thumbs/default.svg`;
  const loader = (thumbs as Record<string, () => Promise<string>>)[key] || (thumbs as Record<string, () => Promise<string>>)[def];
  return await loader();
}
const enhanced = await Promise.all(posts.map(async (p) => ({ ...p, thumb: await getThumb(p.id) })));
---

<!doctype html>
<html lang="sk">
  <head>
    <BaseHead title={`Značka: ${tag}`} description={`Články so značkou ${tag}`} />
  </head>
  <body>
    <Header />
    <main class="archive mx-auto max-w-4xl px-4 sm:px-6 lg:px-8">
      <h1>Články so značkou „{tag}”</h1>
      <p><a href={`${import.meta.env.BASE_URL}tags/`}>← Všetky značky</a></p>
      {enhanced.length === 0 && <p class="text-gray-500">Žiadne články pre túto značku.</p>}
      {enhanced.length > 0 && (
        <PostsGrid items={enhanced.map((post) => ({
          url: `${import.meta.env.BASE_URL}blog/${post.id}/`,
          title: post.data.title,
          date: post.data.pubDate,
          thumbUrl: post.thumb,
        }))}
        columnsClass="grid-cols-1 sm:grid-cols-2 md:grid-cols-2 lg:grid-cols-2"
        titleClass="text-[1.5em]"
        />
      )}
    </main>
    <Footer />
  </body>
  </html>
