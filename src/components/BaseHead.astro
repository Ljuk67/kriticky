---
// Import the global.css file here so that it is included on
// all pages through the use of the <BaseHead /> component.
import '../styles/tailwind.css';
import '../styles/global.css';
// Self-hosted variable fonts
import '@fontsource-variable/bricolage-grotesque';
import '@fontsource-variable/inter';
import '@fontsource/special-elite';
import type { ImageMetadata } from 'astro';
import FallbackImage from '../assets/blog-placeholder-3.jpg';
import { SITE_TITLE } from '../consts';
import gateUrl from '../assets/password-gate.js?url';

interface Props {
	title: string;
	description: string;
	image?: ImageMetadata;
	// SEO extras (optional)
	type?: 'website' | 'article';
	author?: string;
	datePublished?: Date | string;
	dateModified?: Date | string | undefined;
	keywords?: string[];
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site);

const { title, description, image = FallbackImage, type = 'website', author, datePublished, dateModified, keywords = [] } = Astro.props as Props;
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<link rel="icon" type="image/svg+xml" href={`${import.meta.env.BASE_URL}favicon.svg`} />
<link rel="sitemap" href={`${import.meta.env.BASE_URL}sitemap-index.xml`} />
<link
	rel="alternate"
	type="application/rss+xml"
	title={SITE_TITLE}
	href={new URL('rss.xml', Astro.site)}
/>
<meta name="generator" content={Astro.generator} />
<meta name="robots" content="noindex, nofollow" />

<!-- Temporary password gate across site -->
<script type="module" src={gateUrl}></script>

<!-- Self-hosted fonts via @fontsource-variable packages -->

<!-- Font preloads -->
<link rel="preload" href={`${import.meta.env.BASE_URL}fonts/atkinson-regular.woff`} as="font" type="font/woff" crossorigin />
<link rel="preload" href={`${import.meta.env.BASE_URL}fonts/atkinson-bold.woff`} as="font" type="font/woff" crossorigin />

<!-- Canonical URL -->
<link rel="canonical" href={canonicalURL} />

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content={type === 'article' ? 'article' : 'website'} />
<meta property="og:url" content={Astro.url} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={new URL(image.src, Astro.url)} />

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={Astro.url} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={new URL(image.src, Astro.url)} />

<!-- JSON-LD -->
{
  type === 'article' && (
    <script type="application/ld+json">
      {JSON.stringify({
        '@context': 'https://schema.org',
        '@type': 'BlogPosting',
        headline: title,
        description,
        image: new URL(image.src, Astro.url).toString(),
        mainEntityOfPage: new URL(Astro.url.pathname, Astro.site).toString(),
        inLanguage: 'sk',
        author: author ? { '@type': 'Person', name: author } : undefined,
        datePublished: datePublished ? new Date(datePublished).toISOString() : undefined,
        dateModified: dateModified ? new Date(dateModified).toISOString() : undefined,
        keywords: keywords && keywords.length ? keywords.join(', ') : undefined,
      })}
    </script>
  )
}
